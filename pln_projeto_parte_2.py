# -*- coding: utf-8 -*-
"""PLN PROJETO PARTE 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bA_uQXzlUi7D_gOwB8DHAePNaXA0vNi3
"""

!pip install -qU langchain-google-genai

from langchain_google_genai import ChatGoogleGenerativeAI
import getpass
import os

os.environ["GOOGLE_API_KEY"] = getpass.getpass()
modelo = ChatGoogleGenerativeAI(model="gemini-1.5-flash")

import requests
import json

key_api = "WRYaQD9qMCAgMT9n23SwZNMtB1Ag1psIGVQcWMIP"

def buscar_medicamento_por_sintoma(sintoma):
    url = "https://api.fda.gov/drug/label.json"
    params = {"search": sintoma, "limit": 300}
    headers = {"Authorization": f"Bearer {key_api}"}

    response = requests.get(url, params=params, headers=headers)

    if response.status_code == 200:
        data = response.json()
        return data

    else:
        print(f"Erro ao consultar a API: {response.status_code}")
        return []

# Buscar medicamentos relevantes
data = buscar_medicamento_por_sintoma("fever")

if data and 'results' in data:
    for result in data['results']:
        # Extraindo o nome do medicamento
        drug_name = result.get('openfda', {}).get('brand_name')

        # Verifica se o nome do medicamento está disponível
        if drug_name:
            drug_name = drug_name[0]  # Pega o primeiro nome na lista
            indications_and_usage = result.get('indications_and_usage', [])

            # Imprimindo as informações
            print("Nome do Medicamento:", drug_name)
            print("Indicações e Uso:")
            for usage in indications_and_usage:
                print(f"- {usage}")
            print()
        else:
            # Ignora medicamentos sem nome
            continue
else:
    print("Nenhum dado encontrado ou erro ao acessar a API.")

import json
import pandas as pd

# Obtém a lista de resultados da API
json_data_list = data.get('results', [])
data_list = []

# Processar cada item na lista de resultados
for json_data in json_data_list:
    # Verifica se 'brand_name' existe e não está vazio
    if 'openfda' in json_data and json_data['openfda'].get('brand_name'):
        # Criar um dicionário para os dados específicos
        drug_data = {
            'warnings': ', '.join(json_data.get('warnings', [])),
            'brand_name': ', '.join(json_data['openfda'].get('brand_name', [])),
            'generic_name': ', '.join(json_data['openfda'].get('generic_name', [])),
            'product_type': ', '.join(json_data['openfda'].get('product_type', [])),
            'dosage_and_administration': ', '.join(json_data.get('dosage_and_administration', [])),
            'stop_use': ', '.join(json_data.get('stop_use', [])),
            'do_not_use': ', '.join(json_data.get('do_not_use', [])),
            'indications_and_usage': ', '.join(json_data.get('indications_and_usage', []))
        }

        # Adicionar o dicionário à lista de dados
        data_list.append(drug_data)

# Criar um DataFrame a partir da lista de dados
df = pd.DataFrame(data_list)

df

from langchain_core.messages import HumanMessage, SystemMessage

mensagens = [
    SystemMessage(content=f"You're an especialist.Your dataframe is {df.to_string()}. Guide your answers based on this file.Answer in portuguese."),
    HumanMessage("What are the drugs that are related to fever as a symptom?")
]

resposta = modelo.invoke(mensagens)
print(resposta.content)